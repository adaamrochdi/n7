/**
 */
package table.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import table.util.TableAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TableItemProviderAdapterFactory extends TableAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TableItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link table.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link table.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link table.ColonneId} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColonneIdItemProvider colonneIdItemProvider;

	/**
	 * This creates an adapter for a {@link table.ColonneId}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColonneIdAdapter() {
		if (colonneIdItemProvider == null) {
			colonneIdItemProvider = new ColonneIdItemProvider(this);
		}

		return colonneIdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link table.ColonneSaisie} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColonneSaisieItemProvider colonneSaisieItemProvider;

	/**
	 * This creates an adapter for a {@link table.ColonneSaisie}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColonneSaisieAdapter() {
		if (colonneSaisieItemProvider == null) {
			colonneSaisieItemProvider = new ColonneSaisieItemProvider(this);
		}

		return colonneSaisieItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link table.ColonneDeriv} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColonneDerivItemProvider colonneDerivItemProvider;

	/**
	 * This creates an adapter for a {@link table.ColonneDeriv}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColonneDerivAdapter() {
		if (colonneDerivItemProvider == null) {
			colonneDerivItemProvider = new ColonneDerivItemProvider(this);
		}

		return colonneDerivItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link table.ContrainteOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContrainteOperationItemProvider contrainteOperationItemProvider;

	/**
	 * This creates an adapter for a {@link table.ContrainteOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContrainteOperationAdapter() {
		if (contrainteOperationItemProvider == null) {
			contrainteOperationItemProvider = new ContrainteOperationItemProvider(this);
		}

		return contrainteOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link table.TableSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableSourceItemProvider tableSourceItemProvider;

	/**
	 * This creates an adapter for a {@link table.TableSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableSourceAdapter() {
		if (tableSourceItemProvider == null) {
			tableSourceItemProvider = new TableSourceItemProvider(this);
		}

		return tableSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link table.TableResultante} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableResultanteItemProvider tableResultanteItemProvider;

	/**
	 * This creates an adapter for a {@link table.TableResultante}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableResultanteAdapter() {
		if (tableResultanteItemProvider == null) {
			tableResultanteItemProvider = new TableResultanteItemProvider(this);
		}

		return tableResultanteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link table.colonneIdResultante} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected colonneIdResultanteItemProvider colonneIdResultanteItemProvider;

	/**
	 * This creates an adapter for a {@link table.colonneIdResultante}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createcolonneIdResultanteAdapter() {
		if (colonneIdResultanteItemProvider == null) {
			colonneIdResultanteItemProvider = new colonneIdResultanteItemProvider(this);
		}

		return colonneIdResultanteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link table.ColonneSaisieRes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColonneSaisieResItemProvider colonneSaisieResItemProvider;

	/**
	 * This creates an adapter for a {@link table.ColonneSaisieRes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColonneSaisieResAdapter() {
		if (colonneSaisieResItemProvider == null) {
			colonneSaisieResItemProvider = new ColonneSaisieResItemProvider(this);
		}

		return colonneSaisieResItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link table.Script} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScriptItemProvider scriptItemProvider;

	/**
	 * This creates an adapter for a {@link table.Script}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScriptAdapter() {
		if (scriptItemProvider == null) {
			scriptItemProvider = new ScriptItemProvider(this);
		}

		return scriptItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (colonneIdItemProvider != null) colonneIdItemProvider.dispose();
		if (colonneSaisieItemProvider != null) colonneSaisieItemProvider.dispose();
		if (colonneDerivItemProvider != null) colonneDerivItemProvider.dispose();
		if (contrainteOperationItemProvider != null) contrainteOperationItemProvider.dispose();
		if (tableSourceItemProvider != null) tableSourceItemProvider.dispose();
		if (tableResultanteItemProvider != null) tableResultanteItemProvider.dispose();
		if (colonneIdResultanteItemProvider != null) colonneIdResultanteItemProvider.dispose();
		if (colonneSaisieResItemProvider != null) colonneSaisieResItemProvider.dispose();
		if (scriptItemProvider != null) scriptItemProvider.dispose();
	}

}
